{"version":3,"sources":["components/SearchBar.tsx","components/TopNav.tsx","store.tsx","utils.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["defaultSearchResult","kind","data","modhash","dist","children","after","before","useStyles","makeStyles","theme","createStyles","search","position","borderRadius","shape","backgroundColor","fade","palette","common","white","marginRight","spacing","marginLeft","width","breakpoints","up","searchIcon","padding","height","pointerEvents","display","alignItems","justifyContent","inputRoot","color","inputInput","paddingLeft","transition","transitions","create","textField","getSearch","str","a","type","sort","nsfw","Promise","resolve","url","encodeURIComponent","console","log","axios","get","then","response","catch","error","props","classes","useState","searchResult","setSearchResult","reddits","React","open","setOpen","loading","length","className","Autocomplete","id","freeSolo","onChange","event","value","store","navigateTo","root","onOpen","onClose","options","map","option","style","renderInput","params","TextField","InputProps","endAdornment","Fragment","CircularProgress","size","target","res","grow","flexGrow","menuButton","title","sectionDesktop","sectionMobile","anchorEl","setAnchorEl","mobileMoreAnchorEl","setMobileMoreAnchorEl","isMenuOpen","Boolean","isMobileMenuOpen","handleMobileMenuClose","handleMenuClose","renderMenu","Menu","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","MenuItem","onClick","renderMobileMenu","IconButton","aria-label","Badge","badgeContent","currentTarget","aria-controls","aria-haspopup","AppBar","Toolbar","edge","Typography","variant","noWrap","SearchBar","imgUrl","replace","history","createBrowserHistory","isLoading","createState","loaderVisible","redditSorting","redditType","redditAsset","last","imageObj","shownImgUrls","pathName","publicUrl","process","endsWith","slice","push","fetchNext","set","obj","JSON","parse","stringify","numPosts","message","i","post","preview","images","author","fullSize","source","includes","imgObj","image","permalink","window","requestAnimationFrame","e","ms","setTimeout","updateLocation","locArr","split","join","filter","item","this","location","pathname","listen","update","useHookState","imgs","img","index","src","href","TopNav","marginTop","isVisible","fontSize","newSize","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","createMuiTheme","primary","main","secondary","ReactDOM","render","ThemeProvider","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.3f416f87.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { IRedditSearchObject } from '../interfaces';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport axios from 'axios';\nimport { fade, makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport SearchIcon from '@material-ui/icons/Search';\nimport { IProps } from '../interfaces';\nimport { useState as useHookState } from '@hookstate/core';\n\nconst defaultSearchResult: IRedditSearchObject = {\n    kind: \"string\",\n    data: {\n        modhash: '',\n        dist: 0,\n        children: [],\n        after: null,\n        before: null\n    }\n};\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        search: {\n            position: 'relative',\n            borderRadius: theme.shape.borderRadius,\n            backgroundColor: fade(theme.palette.common.white, 0.15),\n            '&:hover': {\n                backgroundColor: fade(theme.palette.common.white, 0.25),\n            },\n            marginRight: theme.spacing(2),\n            marginLeft: 0,\n            width: '100%',\n            [theme.breakpoints.up('sm')]: {\n                marginLeft: theme.spacing(3),\n                width: 'auto',\n            },\n            flexGrow: 1,\n            maxWidth: 400\n        },\n        searchIcon: {\n            padding: theme.spacing(0, 2),\n            height: '100%',\n            position: 'absolute',\n            pointerEvents: 'none',\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n        },\n        inputRoot: {\n            color: 'inherit',\n            width: '100%'\n        },\n        inputInput: {\n            padding: theme.spacing(1, 1, 1, 0),\n            // vertical padding + font size from searchIcon\n            paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\n            transition: theme.transitions.create('width'),\n            width: '100%',\n            [theme.breakpoints.up('md')]: {\n                width: '20ch',\n            },\n            color: '#fff',\n        },\n        textField: {\n            width: '100%'\n        }\n    }),\n);\n\nconst getSearch = async (\n    str: string,\n    type: 'sr' | 'user' = 'sr',\n    sort: 'relevance' | 'hot' | 'top' | 'new' | 'comments' = 'top',\n    nsfw: boolean = true\n) => {\n    return new Promise<IRedditSearchObject>(resolve => {\n        const url = `https://www.reddit.com/search.json` +\n            `?q=${encodeURIComponent(str)}` +\n            `&type=${type}` +\n            `&show=all` +\n            `&sort=${sort}` +\n            `&include_over_18=${nsfw ? 'on' : 'off'}`;\n        console.log(url)\n        axios.get(url)\n            .then((response) => {\n                // handle success\n                console.log(response.data);\n                resolve(response.data as IRedditSearchObject)\n            })\n            .catch((error) => {\n                // handle error\n                console.log(error);\n                resolve(defaultSearchResult)\n            })\n    });\n}\n\nexport default (props: IProps) => {\n    const classes = useStyles();\n    const [searchResult, setSearchResult] = useState(defaultSearchResult);\n    const reddits = searchResult && searchResult.data && searchResult.data.children ? searchResult.data.children : [];\n    const [open, setOpen] = React.useState(false);\n    const loading = open && reddits.length === 0;\n    return (\n        <>\n            <div className={classes.search}>\n                <div className={classes.searchIcon}>\n                    <SearchIcon />\n                </div>\n                <Autocomplete\n                    id=\"search-bar\"\n                    freeSolo\n                    open={open}\n                    onChange={(event, value) => {\n                        console.log('search change', value)\n                        if(value){\n                            props.store.navigateTo(value);\n                        }\n                    }}\n                    classes={{\n                        root: classes.inputRoot\n                    }}\n                    onOpen={() => {\n                        setOpen(true);\n                    }}\n                    onClose={() => {\n                        setOpen(false);\n                    }}\n                    options={reddits.map((option) => {\n                        return option.data.url\n                    })}\n                    style={{ width: '100%' }}\n                    renderInput={(params) => (\n                        <TextField\n                            {...params}\n                            // variant=\"outlined\"\n                            InputProps={{\n                                ...params.InputProps,\n                                endAdornment: (\n                                    <React.Fragment>\n                                        {loading ? <CircularProgress color=\"inherit\" size={20} /> : null}\n                                        {params.InputProps.endAdornment}\n                                    </React.Fragment>\n                                ),\n                                classes: {\n                                    root: classes.inputInput\n                                }\n                            }}\n                            classes={{\n                                root: classes.textField,\n                            }}\n                            onChange={(event) => {\n                                getSearch(event.target.value).then((res) => {\n                                    setSearchResult(res)\n                                })\n                                console.log(event.target.value)\n                            }}\n                        />\n                    )}\n                />\n            </div>\n        </>\n    )\n};","import React from 'react';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport Badge from '@material-ui/core/Badge';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Menu from '@material-ui/core/Menu';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport AccountCircle from '@material-ui/icons/AccountCircle';\nimport MailIcon from '@material-ui/icons/Mail';\nimport NotificationsIcon from '@material-ui/icons/Notifications';\nimport SearchBar from './SearchBar';\nimport { IStore, IProps } from '../interfaces';\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        grow: {\n            flexGrow: 1,\n        },\n        menuButton: {\n            marginRight: theme.spacing(2),\n        },\n        title: {\n            display: 'none',\n            [theme.breakpoints.up('sm')]: {\n                display: 'block',\n            },\n        },\n        sectionDesktop: {\n            display: 'none',\n            [theme.breakpoints.up('md')]: {\n                display: 'flex',\n            },\n        },\n        sectionMobile: {\n            display: 'flex',\n            [theme.breakpoints.up('md')]: {\n                display: 'none',\n            },\n        },\n    }),\n);\n\nexport default (props: IProps) => {\n    const classes = useStyles();\n    const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n    const [mobileMoreAnchorEl, setMobileMoreAnchorEl] = React.useState<null | HTMLElement>(null);\n\n    const isMenuOpen = Boolean(anchorEl);\n    const isMobileMenuOpen = Boolean(mobileMoreAnchorEl);\n\n    const handleProfileMenuOpen = (event: React.MouseEvent<HTMLElement>) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleMobileMenuClose = () => {\n        setMobileMoreAnchorEl(null);\n    };\n\n    const handleMenuClose = () => {\n        setAnchorEl(null);\n        handleMobileMenuClose();\n    };\n\n    const handleMobileMenuOpen = (event: React.MouseEvent<HTMLElement>) => {\n        setMobileMoreAnchorEl(event.currentTarget);\n    };\n\n    const menuId = 'primary-search-account-menu';\n    const renderMenu = (\n        <Menu\n            anchorEl={anchorEl}\n            anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\n            id={menuId}\n            keepMounted\n            transformOrigin={{ vertical: 'top', horizontal: 'right' }}\n            open={isMenuOpen}\n            onClose={handleMenuClose}\n        >\n            <MenuItem onClick={handleMenuClose}>Profile</MenuItem>\n            <MenuItem onClick={handleMenuClose}>My account</MenuItem>\n        </Menu>\n    );\n\n    const mobileMenuId = 'primary-search-account-menu-mobile';\n    const renderMobileMenu = (\n        <Menu\n            anchorEl={mobileMoreAnchorEl}\n            anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\n            id={mobileMenuId}\n            keepMounted\n            transformOrigin={{ vertical: 'top', horizontal: 'right' }}\n            open={isMobileMenuOpen}\n            onClose={handleMobileMenuClose}\n        >\n            <MenuItem>\n                <IconButton aria-label=\"show 4 new mails\" color=\"inherit\">\n                    <Badge badgeContent={4} color=\"secondary\">\n                        <MailIcon />\n                    </Badge>\n                </IconButton>\n                <p>Messages</p>\n            </MenuItem>\n            <MenuItem>\n                <IconButton aria-label=\"show 11 new notifications\" color=\"inherit\">\n                    <Badge badgeContent={11} color=\"secondary\">\n                        <NotificationsIcon />\n                    </Badge>\n                </IconButton>\n                <p>Notifications</p>\n            </MenuItem>\n            <MenuItem onClick={handleProfileMenuOpen}>\n                <IconButton\n                    aria-label=\"account of current user\"\n                    aria-controls=\"primary-search-account-menu\"\n                    aria-haspopup=\"true\"\n                    color=\"inherit\"\n                >\n                    <AccountCircle />\n                </IconButton>\n                <p>Profile</p>\n            </MenuItem>\n        </Menu>\n    );\n\n    return (\n        <div className={classes.grow}>\n            <AppBar position=\"fixed\">\n                <Toolbar>\n                    <IconButton\n                        edge=\"start\"\n                        className={classes.menuButton}\n                        color=\"inherit\"\n                        aria-label=\"open drawer\"\n                    >\n                        <MenuIcon />\n                    </IconButton>\n                    <Typography className={classes.title} variant=\"h6\" noWrap>\n                        React Gallery\n                    </Typography>\n\n                    <div className={classes.grow} />\n                    <SearchBar store={props.store} />\n                    {/* <div className={classes.sectionDesktop}>\n                        <IconButton aria-label=\"show 4 new mails\" color=\"inherit\">\n                            <Badge badgeContent={4} color=\"secondary\">\n                                <MailIcon />\n                            </Badge>\n                        </IconButton>\n                        <IconButton aria-label=\"show 17 new notifications\" color=\"inherit\">\n                            <Badge badgeContent={17} color=\"secondary\">\n                                <NotificationsIcon />\n                            </Badge>\n                        </IconButton>\n                        <IconButton\n                            edge=\"end\"\n                            aria-label=\"account of current user\"\n                            aria-controls={menuId}\n                            aria-haspopup=\"true\"\n                            onClick={handleProfileMenuOpen}\n                            color=\"inherit\"\n                        >\n                            <AccountCircle />\n                        </IconButton>\n                    </div>\n                    <div className={classes.sectionMobile}>\n                        <IconButton\n                            aria-label=\"show more\"\n                            aria-controls={mobileMenuId}\n                            aria-haspopup=\"true\"\n                            onClick={handleMobileMenuOpen}\n                            color=\"inherit\"\n                        >\n                            <MoreIcon />\n                        </IconButton>\n                    </div> */}\n                </Toolbar>\n            </AppBar>\n            {renderMobileMenu}\n            {renderMenu}\n        </div>\n    );\n};","import { createBrowserHistory } from 'history';\nimport { IImageObj } from './interfaces';\nimport { createState } from '@hookstate/core';\nimport { objCopy, nextFrame, wait } from './utils';\nimport axios from 'axios';\n\nconst imgUrl = (url: string) => {\n    return url.replace(/&amp;/g, '&')\n}\n\nexport class Store {\n    // create a place to store our history so navigation works (back, forward)\n    history = createBrowserHistory();\n\n    constructor() {\n        // set the current location based on url\n        this.updateLocation(window.location.pathname);\n\n        // set up a listener to handle url changes from \"navigateTo\"\n        this.history.listen((update) => {\n            this.updateLocation(update.location.pathname);\n        });\n\n    }\n\n    // basic ui\n    isLoading = createState(false);\n    size = createState(400);\n    loaderVisible: boolean = false;\n\n    // reddit options\n    redditSorting = createState<\"new\" | \"hot\">('new'); // new or hot\n    redditType = createState<string | null>(null);\n    redditAsset = createState<string | null>(null);\n    last: string | null = null;\n\n    // image processor\n    imageObj = createState<IImageObj[]>([]);\n    shownImgUrls: string[] = []; // keep track of shown to prevent duplicates\n\n    // calling this with \"/r/sub_reddit\" or \"/u/reddit_user\" will navigate to that sub\n    navigateTo = (pathName: string) => {\n        let publicUrl = process.env.PUBLIC_URL || '';\n        // remove trailing slash if it exists\n        if(publicUrl.endsWith('/')){\n            publicUrl = publicUrl.slice(0, -1);\n        }\n        this.history.push(publicUrl + pathName, {})\n    }\n\n    fetchNext = () => {\n        // const { redditType, redditAsset, redditSorting, isLoading } = this;\n        if (\n            !this.isLoading.get() &&\n            this.redditType.get() &&\n            this.redditAsset.get()\n        ) {\n            this.isLoading.set(true);\n\n            let url: string;\n            if (this.redditType.get() === 'r') {\n                url = `https://www.reddit.com/${this.redditType.get()}/${this.redditAsset.get()}/${this.redditSorting.get()}.json?limit=50${this.last ? `&after=${this.last}` : ''}`;\n            } else {\n                url = `https://www.reddit.com/${this.redditType.get()}/${this.redditAsset.get()}/.json?limit=50${this.last ? `&after=${this.last}` : ''}`;\n            }\n            // console.log(url)\n            const imageObj = objCopy(this.imageObj.get());\n            let numPosts = 0;\n            axios.get(url).then((message) => {\n                // console.log(message.data)\n                if (message.data) {\n                    this.last = message.data.data.after as string;\n                    const children = message.data.data.children;\n                    for (let i = 0; i < children.length; i++) {\n                        const post = children[i].data;\n                        if (post.preview && post.preview.images && post.preview.images.length > 0) {\n                            const author = post.author;\n                            const images = post.preview.images;\n                            const title = post.title;\n                            for (let i = 0; i < images.length; i++) {\n                                const fullSize = imgUrl(images[i].source.url);\n                                if (!(this.shownImgUrls.includes(fullSize))) {\n                                    const imgObj: IImageObj = {\n                                        author: author,\n                                        image: fullSize,\n                                        title: title,\n                                        post: `https://www.reddit.com${post.permalink}`\n                                    };\n                                    imageObj.push(imgObj)\n                                    this.shownImgUrls.push(fullSize)\n                                }\n                            }\n                        }\n                        numPosts++;\n                    }\n                }\n                this.imageObj.set(imageObj)\n                this.isLoading.set(false);\n                window.requestAnimationFrame(() => {\n                    if (this.loaderVisible && numPosts > 0) {\n                        this.fetchNext();\n                    }\n                })\n            }).catch((e) => {\n                this.isLoading.set(false);\n                console.log(e)\n            })\n        } else {\n            wait(500).then(() => {\n                this.fetchNext();\n            })\n        }\n    }\n\n    // not used directly. Only called by listener\n    private updateLocation = (pathName: string) => {\n        console.log('location updated', pathName)\n        const publicUrl = process.env.PUBLIC_URL || '';\n        let cleanPathname = pathName.split(publicUrl).join('');\n        const locArr = cleanPathname.split('/').filter(item => item !== '');\n        if (locArr.length === 2) {\n            this.redditType.set(locArr[0]);\n            this.redditAsset.set(locArr[1]);\n        } else {\n            this.redditType.set(null);\n            this.redditAsset.set(null);\n        }\n        this.imageObj.set([]);\n        nextFrame().then(() => {\n            this.fetchNext();\n        })\n    }\n}\n\nlet store = new Store;\n(window as any).store = store;\n\nexport default store;","\nexport const objCopy = <T>(obj: T): T => {\n    return JSON.parse(JSON.stringify(obj));\n}\n\nexport const nextFrame = () => {\n    return new Promise<void>((resolve) => {\n        window.requestAnimationFrame(() => {\n            resolve();\n        })\n    })\n}\n\nexport const wait = (ms: number) => {\n    return new Promise<void>((resolve) => {\n        window.setTimeout(() => {\n            resolve();\n        }, ms);\n    })\n}","import React from 'react';\nimport './App.scss';\nimport VisibilitySensor from 'react-visibility-sensor';\nimport { FaUserCircle, FaRedditAlien } from 'react-icons/fa';\nimport { AiOutlineLoading, AiFillPicture, AiOutlineZoomIn, AiOutlineZoomOut } from 'react-icons/ai';\nimport TopNav from './components/TopNav';\nimport store from './store';\nimport { useState as useHookState } from '@hookstate/core';\n\nexport default () => {\n\tconst imageObj = useHookState(store.imageObj);\n\tconst size = useHookState(store.size);\n\n\tlet publicUrl = process.env.PUBLIC_URL || '';\n\t// remove trailing slash if it exists\n\tif (publicUrl.endsWith('/')) {\n\t\tpublicUrl = publicUrl.slice(0, -1);\n\t}\n\n\tlet imgs = imageObj.get().map((img, index) => {\n\t\treturn (\n\t\t\t<div className=\"img-cont\" key={index} style={{\n\t\t\t\theight: size.get(),\n\t\t\t\twidth: size.get()\n\t\t\t}}>\n\t\t\t\t<img src={img.image} />\n\t\t\t\t<div className=\"info-bar\">\n\t\t\t\t\t<a href={`https://www.reddit.com/user/${img.author}/`} target=\"_blank\" title={img.author}><FaUserCircle /></a>\n\t\t\t\t\t<a href={img.post} target=\"_blank\" title={img.title}><FaRedditAlien /></a>\n\t\t\t\t\t<a href={`${publicUrl}/user/${img.author}`} target=\"_blank\" title=\"User images\"><AiFillPicture /></a>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t});\n\treturn (\n\t\t<>\n\t\t\t<TopNav store={store} />\n\t\t\t<div className=\"imgs\" style={{ marginTop: 64 }}>\n\t\t\t\t{imgs}\n\t\t\t\t<VisibilitySensor onChange={(isVisible) => {\n\t\t\t\t\tstore.loaderVisible = isVisible;\n\t\t\t\t\tif (isVisible) {\n\t\t\t\t\t\tconsole.log('fetching next')\n\t\t\t\t\t\tstore.fetchNext()\n\t\t\t\t\t}\n\t\t\t\t}}>\n\t\t\t\t\t<div style={{\n\t\t\t\t\t\theight: 200,\n\t\t\t\t\t\tfontSize: 40,\n\t\t\t\t\t\tcolor: '#fff'\n\t\t\t\t\t}}>\n\t\t\t\t\t\t{store.isLoading ? <AiOutlineLoading className=\"icon-spin\" /> : null}\n\t\t\t\t\t</div>\n\t\t\t\t</VisibilitySensor>\n\t\t\t</div>\n\t\t\t<div className=\"zoom-box\">\n\t\t\t\t<div className=\"zoom-btn\"\n\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\tlet newSize = size.get() * 1.1;\n\t\t\t\t\t\tif (newSize > 1000) {\n\t\t\t\t\t\t\tnewSize = 1000;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tstore.size.set(newSize);\n\t\t\t\t\t}}\n\t\t\t\t><AiOutlineZoomIn /></div>\n\t\t\t\t<div className=\"zoom-btn\"\n\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\tlet { size } = store;\n\t\t\t\t\t\tlet newSize = size.get() * 0.9;\n\t\t\t\t\t\tif (newSize < 200) {\n\t\t\t\t\t\t\tnewSize = 200;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tstore.size.set(newSize);\n\t\t\t\t\t}}\n\t\t\t\t><AiOutlineZoomOut /></div>\n\t\t\t</div>\n\t\t</>\n\t)\n};\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#bf360c',\n    },\n    secondary: {\n      main: '#d84315',\n    },\n  },\n});\n\nReactDOM.render(\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <App />\n    </ThemeProvider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}